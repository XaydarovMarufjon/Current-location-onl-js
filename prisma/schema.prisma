// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  password String
  refreshToken String?
  employee Employee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Employee {
  id String @id @default(uuid())
  fullName String
  organization String
  departmentId String
  department Department @relation(fields: [departmentId], references: [id])
  position String
  email String @unique
  phone String
  roleId String
  role Role @relation(fields: [roleId], references: [id])
  photo String
  userId String  @unique
  user User? @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employees")
}

model Department {
  id String @id @default(uuid())
  name String @unique
  nameuz String?
  nameru String?
  subdepartment SubDepartment[]
  employee Employee[]
  personal Personal[]
  listOrgId String
  listOrg ListOrg @relation(fields: [listOrgId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model SubDepartment {
  id String @id @default(uuid())
  name String @unique
  nameuz String?
  nameru String?
  personal Personal[]
  departmentId String 
  department Department @relation(fields: [departmentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subDepartments")
}

model Role {
  id String @id @default(uuid())
  name String @unique
  employee Employee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Position {
  id String @id @default(uuid())
  name String
  nameuz String?
  nameru String?
  personal Personal[]
  listOrgId String
  listOrg ListOrg @relation(fields: [listOrgId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("positions")
}

model ListOrg {
  id String @id @default(uuid())
  name String
  nameuz String?
  nameru String?
  creatorId String?
  editorId String?
  removerId String?
  department Department[]
  position Position[]
  personal Personal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("listorgs")
}

model Personal {
  id String @id @default(uuid())
  firstName String
  middleName String?
  lastName String
  phone String?
  email String?
  positionId String
  position Position @relation(fields: [positionId], references: [id])
  listOrgId String
  listOrg ListOrg @relation(fields: [listOrgId], references: [id])
  departmentId String
  department Department @relation(fields: [departmentId], references: [id])
  subDepartmentId String?
  subDepartment SubDepartment? @relation(fields: [subDepartmentId], references: [id])
  creatorId String?
  editorId String?
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personal")
}
