generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  password     String
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee?

  @@map("users")
}

model Employee {
  id           String     @id @default(uuid())
  fullName     String
  organization String
  departmentId String
  position     String
  email        String     @unique
  phone        String
  roleId       String
  photo        String
  userId       String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("employees")
}

model Department {
  id            String          @id @default(uuid())
  name          String          @unique
  nameuz        String?
  nameru        String?
  listOrgId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  listOrg       ListOrg         @relation(fields: [listOrgId], references: [id])
  employee      Employee[]
  personal      Personal[]
  subdepartment SubDepartment[]

  @@map("departments")
}

model SubDepartment {
  id           String     @id @default(uuid())
  name         String     @unique
  nameuz       String?
  nameru       String?
  departmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  personal     Personal[]
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("subDepartments")
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employee  Employee[]

  @@map("roles")
}

model Position {
  id        String     @id @default(uuid())
  name      String
  nameuz    String?
  nameru    String?
  listOrgId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  personal  Personal[]
  listOrg   ListOrg    @relation(fields: [listOrgId], references: [id])

  @@map("positions")
}

model TypeIncident {
  id        String   @id @default(uuid())
  name      String   @unique
  nameuz    String
  nameru    String
  code      String   @unique
  vector    String
  creatorId String?
  editorId  String?
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("typeIncidents")
}

model ListOrg {
  id         String       @id @default(uuid())
  name       String
  nameuz     String?
  nameru     String?
  creatorId  String?
  editorId   String?
  removerId  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  department Department[]
  personal   Personal[]
  position   Position[]

  @@map("listorgs")
}

model Personal {
  id              String         @id @default(uuid())
  firstName       String
  middleName      String?
  lastName        String
  phone           String?
  email           String?
  positionId      String
  listOrgId       String
  departmentId    String
  subDepartmentId String?
  creatorId       String?
  editorId        String?
  removerId       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  department      Department     @relation(fields: [departmentId], references: [id])
  listOrg         ListOrg        @relation(fields: [listOrgId], references: [id])
  position        Position       @relation(fields: [positionId], references: [id])
  subDepartment   SubDepartment? @relation(fields: [subDepartmentId], references: [id])

  @@map("personal")
}

model HotLine {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  fullName    String   @unique
  contact     String
  description String
  answer      String
  employeeId  String
  creatorId   String?
  editorId    String?
  removerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("HotLine")
}

model ServiceSue {
  id        String   @id @default(uuid())
  name      String   @unique
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ServiceSue")
}

model TypeComputer {
  id            String   @id @default(uuid())
  incidentTypes String
  code          String   @unique
  vector        String
  nameuz        String
  nameru        String
  creatorId     String?
  editorId      String?
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("TypeComputer")
}

model AboutMeans {
  id          String   @id @default(uuid())
  code        String   @unique
  toolDetails String
  nameuz      String
  nameru      String
  creatorId   String?
  editorId    String?
  removerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("AboutMeans")
}

model SeverityLevel {
  id            String   @id @default(uuid())
  code          String   @unique
  severityLevel String
  nameuz        String
  nameru        String
  creatorId     String?
  editorId      String?
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("SeverityLevel")
}

model SortForce {
  id               String   @id @default(uuid())
  code             String   @unique
  incidentSeverity String
  nameuz           String
  nameru           String
  creatorId        String?
  editorId         String?
  removerId        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("SortForce")
}

model SortGravity {
  id               String   @id @default(uuid())
  code             String   @unique
  incidentSeverity String
  nameuz           String
  nameru           String
  creatorId        String?
  editorId         String?
  removerId        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("SortGravity")
}

model MarkLimit {
  id            String   @id @default(uuid())
  code          String   @unique
  privacySymbol String
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("MarkLimit")
}

model AttackedDomain {
  id            String   @id @default(uuid())
  hosting       String
  domainSupport String   @unique
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("AttackedDomain")
}

model AttackedDomainUri {
  id                  String   @id @default(uuid())
  code                String   @unique
  organizationWebsite String
  nameuz              String
  nameru              String
  creatorId           String
  editorId            String
  removerId           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("AttackedDomainUri")
}

model AttackedDomainEmail {
  id        String   @id @default(uuid())
  code      String   @unique
  email     String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("AttackedDomainEmail")
}

model HarmfulDomain {
  id            String   @id @default(uuid())
  hosting       String
  domainSupport String
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("HarmfulDomain")
}

model HarmfulDomainUri {
  id                  String   @id @default(uuid())
  code                String   @unique
  organizationWebsite String
  nameuz              String
  nameru              String
  creatorId           String
  editorId            String
  removerId           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("HarmfulDomainUri")
}

model HarmfulDomainEmail {
  id        String   @id @default(uuid())
  code      String   @unique
  email     String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("HarmfulDomainEmail")
}

model Vulnerability {
  id        String   @id @default(uuid())
  code      String   @unique
  cellPhone String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Vulnerability")
}

model AsDetected {
  id        String   @id @default(uuid())
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  @@map("AsDetected")
}

model DetectedStatus {
  id        String   @id @default(uuid())
  name      String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("DetectedStatus")
}

model ImpactObject {
  id               String   @id @default(uuid())
  code             String   @unique
  objectsInfluence String
  nameru           String
  creatorId        String
  editorId         String
  removerId        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  nameuz           String

  @@map("ImpactObject")
}

model TypeComponents {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("TypeComponents")
}

model GroupComponents {
  id        String   @id @default(uuid())
  code      String   @unique
  nameGroup String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("GroupComponents")
}

model ImpactComponent {
  id               String   @id @default(uuid())
  code             String   @unique
  impactComponents String
  nameuz           String
  nameru           String
  creatorId        String
  editorId         String
  removerId        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("ImpactComponent")
}

model Motivation {
  id           String   @id @default(uuid())
  code         String   @unique
  hackerGroups String
  nameuz       String
  nameru       String
  creatorId    String
  editorId     String
  removerId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("Motivation")
}

model MethodViolator {
  id            String   @id @default(uuid())
  techniqueCode String   @unique
  nameTechnique String
  MITRECode     String   @unique
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("MethodViolator")
}

model TacticsViolator {
  id           String   @id @default(uuid())
  code         String   @unique
  objectAttack String
  stages       String
  description  String
  nameuz       String
  nameru       String
  creatorId    String
  editorId     String
  removerId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("TacticsViolator")
}

model TypicalThreat {
  id        String   @id @default(uuid())
  gangTools String
  toolType  String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("TypicalThreat")
}

model ResGeography {
  id                String   @id @default(uuid())
  code              String   @unique
  geographicregions String
  nameuz            String
  nameru            String
  creatorId         String
  editorId          String
  removerId         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ResGeography")
}

model CurrentStatus {
  id         String   @id @default(uuid())
  code       String   @unique
  nameStatus String
  nameuz     String
  nameru     String
  creatorId  String
  editorId   String
  removerId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("CurrentStatus")
}

model Confidentiality {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Confidentiality")
}

model DamageFactors {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("DamageFactors")
}

model SubjectDamage {
  id        String   @id @default(uuid())
  code      String   @unique
  damage    String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("SubjectDamage")
}

model EmployeeName {
  id        String   @id @default(uuid())
  code      String   @unique
  fullName  String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("EmployeeName")
}

model EditEmployeeName {
  id        String   @id @default(uuid())
  code      String   @unique
  fullName  String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("EditEmployeeName")
}

model IdentifiedThreat {
  id           String   @id @default(uuid())
  code         String   @unique
  threatSource String
  nameuz       String
  nameru       String
  creatorId    String
  editorId     String
  removerId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("IdentifiedThreat")
}

model IdentificationUG {
  id            String   @id @default(uuid())
  identifierUBI String   @unique
  nameUBI       String
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("IdentificationUG")
}

model ImpactUG {
  id        String   @id @default(uuid())
  code      String   @unique
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nameUG    String

  @@map("ImpactUG")
}

model ExactType {
  id              String   @id @default(uuid())
  code            String   @unique
  objectInfluence String
  nameuz          String
  nameru          String
  creatorId       String
  editorId        String
  removerId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("ExactType")
}

model ImplementUG {
  id        String   @id @default(uuid())
  name      String   @unique
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ImplementUG")
}

model IdentifiedUG {
  id          String   @id @default(uuid())
  description String
  nameuz      String
  nameru      String
  creatorId   String
  editorId    String
  removerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("IdentifiedUG")
}

model ConsequencesUG {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ConsequencesUG")
}

model EvaluationUG {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  nameuz    String
  nameru    String
  creatorId String
  editorId  String
  removerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("EvaluationUG")
}

model PresenceUG {
  id            String   @id @default(uuid())
  code          String   @unique
  vulnerability String
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("PresenceUG")
}

model AuthorizationUG {
  id            String   @id @default(uuid())
  code          String   @unique
  vulnerability String
  nameuz        String
  nameru        String
  creatorId     String
  editorId      String
  removerId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("AuthorizationUG")
}

model MacroRegional {
  id          String   @id @default(uuid())
  code        String   @unique
  macroRegion String
  nameuz      String
  nameru      String
  creatorId   String
  editorId    String
  removerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("MacroRegional")
}

model GeographicalRegion {
  id         String   @id @default(uuid())
  code       String   @unique
  geoRegions String
  nameuz     String
  nameru     String
  creatorId  String
  editorId   String
  removerId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("GeographicalRegion")
}

model Country {
  id                String   @id @default(uuid())
  digitalCode       String   @unique
  stateName         String
  letterCountryCode String
  nameuz            String
  nameru            String
  creatorId         String
  editorId          String
  removerId         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("Country")
}
